{
  "openapi": "3.0.3",
  "info": {
    "description": "This is a documentation for the Qurba backend API, please, note that not all apis are implemented and tested, however there is some trouble sending data in body or queries",
    "version": "1.0.0",
    "title": "Qurba API",
    "contact": {
      "email": "ahmedhanyhasn@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "/api/{direction}",
      "description": "Development server",
      "variables": {
        "port": {
          "default": "8080"
        },
        "direction": {
          "enum": ["rest", "user"],
          "default": "rest"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Restaurants",
      "description": "Restaurants endpoint"
    },
    {
      "name": "Users",
      "description": "Users endpoint"
    }
  ],
  "paths": {
    "/create/rest": {
      "post": {
        "tags": ["Restaurants"],
        "summary": "Creates new restaurant",
        "requestBody": {
          "description": "Restaurant Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Restaurant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/create/user": {
      "post": {
        "tags": ["Users"],
        "summary": "Creates new user",
        "requestBody": {
          "description": "User Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/insert/rests": {
      "post": {
        "tags": ["Restaurants"],
        "summary": "Creates many restaurants at once",
        "requestBody": {
          "description": "Restaurants Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                      "type": "object",
                      "$ref": "#/definitions/Restaurant"
                    }
                  }
                }
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/search/user": {
      "post": {
        "tags": ["Users"],
        "summary": "Searches for a user with specific data supplied in body",
        "requestBody": {
          "description": "user Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/insert/users": {
      "post": {
        "tags": ["Users"],
        "summary": "Creates many users at once",
        "requestBody": {
          "description": "Users Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                      "type": "object",
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/search/rest": {
      "post": {
        "tags": ["Restaurants"],
        "summary": "Searches for a restaurant with specific data supplied in body",
        "requestBody": {
          "description": "Restaurant Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/definitions/Restaurant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/update/rest/{id}": {
      "put": {
        "tags": ["Restaurants"],
        "summary": "Updates a restaurant using id and supplied body",
        "requestBody": {
          "description": "Restaurant Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Restaurant"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Takes id of the restaurant that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "624fecd3e88b5fcf98429089"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/update/user/{id}": {
      "put": {
        "tags": ["Users"],
        "summary": "Updates a user using id and supplied body",
        "requestBody": {
          "description": "Restaurant Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Takes id of the user that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "625559a2d0f0198dfaac153c"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/get/all": {
      "get": {
        "tags": ["Restaurants", "Users"],
        "summary": "Reads all documents",
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/get/rest/{id}": {
      "get": {
        "tags": ["Restaurants"],
        "summary": "Reads restaurant with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "takes id of the restaurant that needs to be read",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "624fecd3e88b5fcf98429089"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/get/user/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Reads User with specific id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "takes id of the user that needs to be read",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "625559a2d0f0198dfaac153c"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/get/rest/{slug}": {
      "get": {
        "tags": ["Restaurants"],
        "summary": "Reads restaurant with specific slug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "takes slug for the restaurant that needs to be read",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "pizza-queen"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },

    "/get/rest/search1km/{id}": {
      "get": {
        "tags": ["Restaurants"],
        "summary": "Searches for a restaurants around the restaurant with the supplied id in a radius of 1km",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the restaurant at the center",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "624fecd3e88b5fcf98429089"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/get/user/searchby/{cuisine}": {
      "get": {
        "tags": ["Users"],
        "summary": "Search for all users for a specific Cuisine (e.g. Burgers) that have the following criteria:\n - User has Burgers as part of their Favorite Cuisines\n - User has a restaurant where the Cuisine is Burger",
        "parameters": [
          {
            "name": "cuisine",
            "in": "path",
            "description": "fav cuisine for the user",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "burger"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/del/all": {
      "delete": {
        "tags": ["Restaurants", "Users"],
        "summary": "Deletes all restaurants",
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/del/{id}": {
      "delete": {
        "tags": ["Restaurants", "Users"],
        "summary": "Deletes restaurant with specific id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "id of specific restaurant",
            "example": "624fecd3e88b5fcf98429089",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "fullName": {
          "type": "object",

          "properties": {
            "firstName": {
              "type": "string",
              "nullable": false,
              "description": "user's first name"
            },
            "lastName": {
              "type": "string",
              "nullable": false,
              "description": "user's last name"
            }
          },
          "description": "user's full name"
        },
        "favCuisines": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "user's favorite cuisines"
        },
        "managedRests": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "id strings of the restaurants the user manage"
        }
      },
      "example": {
        "fullName": {
          "firstName": "ahmed",
          "lastName": "hany"
        },
        "favCuisines": ["burger", "pizza"],
        "managedRests": ["624fecd3e88b5fcf98429089", "62507853cdd7f93668f1a193"]
      }
    },
    "Restaurant": {
      "type": "object",
      "properties": {
        "restName": {
          "type": "string",
          "minimum": 1,
          "maximum": 50
        },
        "cuisine": {
          "type": "string"
        },
        "long": {
          "type": "number",
          "minimum": -180,
          "maximum": 180
        },
        "lat": {
          "type": "number",
          "minimum": -90,
          "maximum": 90
        }
      },
      "example": {
        "restName": "pizza queen",
        "cuisine": "pizza",
        "long": 107.385,
        "lat": 3.62
      }
    }
  }
}
